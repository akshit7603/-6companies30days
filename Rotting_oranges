class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int f_cnt=0;
        int n=grid.size();
        int m=grid[0].size();
        int rotten=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)f_cnt++;
                else if(grid[i][j]==2){
                    q.push({i,j});
                    rotten++;
                }
            }
        }
        if(f_cnt ==0)return 0;
         int t=-1;
         int total=0;
         int dr[]={+1,0,-1,0};
         int dc[]={0,-1,0,+1};
         while(!q.empty()){
            int s=q.size();
            total+=s;
            for(int i=0;i<s;i++){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            for(int k=0;k<4;k++){
                int nrow=row+dr[k];
                int ncol=col+dc[k];
                if(nrow >=0 && ncol >=0 && nrow <n && ncol < m && grid[nrow][ncol]==1){
                    grid[nrow][ncol]=2;
                    q.push({nrow,ncol});
                }
            }
            }
            t++;
         }
         if(total-rotten < f_cnt)return -1;
         return t;
    }
};
