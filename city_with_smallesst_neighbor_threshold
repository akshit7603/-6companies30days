class Solution {
public:
    void dijkstra(int src,vector<int>&dist,vector<vector<pair<int,int>>>&adj){
         dist[src]=0;
         priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
         pq.push({0,src});
         while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int node=it.second;
            for(auto v:adj[node]){
                int adj_node=v.first;
                int adj_wt=v.second;
                if(dist[node]+adj_wt < dist[adj_node]){
                    dist[adj_node]=dist[node]+adj_wt;
                    pq.push({dist[adj_node],adj_node});
                }
            }
         }
    }
    int findTheCity(int n, vector<vector<int>>& edges, int Threshold) {
        vector<vector<pair<int,int>>>adj(n);
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<int>res(n,0);
        for(int i=0;i<n;i++){
            vector<int>dist(n,1e9);
            dijkstra(i,dist,adj);
            for(int j=0;j<n;j++){
                if(j!=i && dist[j] <=Threshold){
                    res[i]++;
                }
            }
           
        }
        int maxi=1e9;
        int maxi_ind=-1;
        for(int i=0;i<n;i++){
            if(res[i] < maxi){
                maxi=res[i];
                maxi_ind=i;
            }
            else if(res[i]==maxi){
                maxi_ind=i;
            }
        }
        return maxi_ind;
    }
};
