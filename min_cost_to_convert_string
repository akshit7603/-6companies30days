long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        vector<vector<int>>dist(26,vector<int>(26,1e9));
        int n=original.size(),m=source.length();
       for(int i=0;i<n;i++){
        dist[original[i]-'a'][changed[i]-'a']=min(dist[original[i]-'a'][changed[i]-'a'],cost[i]);
       }
       for(int i=0;i<26;i++)dist[i][i]=0;
       for(int k=0;k<26;k++){
        for(int i=0;i<26;i++){
            for(int j=0;j<26;j++){
                dist[i][j]=min((long)dist[i][j],(long)dist[i][k]+dist[k][j]);
            }
        }
       }

       long f_l=0;
       for(int i=0;i<m;i++){
        if(source[i]!=target[i]){
            int x=dist[source[i]-'a'][target[i]-'a'];
            if(x==1e9){
                return -1;
            }
            f_l+=x;
        }
       }
       return f_l;
      
    }
};
